#[derive(Debug)]
#[derive(Clone)]

struct 행렬 {
    좌우: usize,
    상하: usize,
    값: char,
}

fn 케레스식_암호행렬(입력:&str) -> (Vec<행렬>, usize, usize) {
    let mut 행렬표:Vec<행렬> = Vec::new();

    let 한줄씩 = 입력.lines();

    let mut 좌우:usize = 0;
    let mut 상하:usize = 0;

    for 줄 in 한줄씩 {
        let 한글자씩 = 줄.chars();
        좌우 = 0;
        for 글자 in 한글자씩 {
            let 한글자 = 행렬 {
                좌우,
                상하,
                값: 글자,
            };
            행렬표.push(한글자);
            좌우+=1;
        }
        상하+=1;
    }
    return (행렬표, 좌우, 상하);
}

pub fn 꼬마_요정_아가씨의_부탁(입력:&str) {
    let 행렬표 = 케레스식_암호행렬(입력);
    let 행렬 = 행렬표.0;
    let mut 크리스마스:i32 = 0;
    let mut 시작좌표 = Vec::new();
    // println!("{:?}", 행렬표);
    행렬.clone().iter()
        .filter(|한글자| 한글자.값 == 'X' )
        .for_each(|한글자|
            시작좌표.push((한글자.좌우, 한글자.상하)),
        );
    
    println!("{:?}", 시작좌표);
    // M 찾기
    for 좌표 in 시작좌표 {

        let mut 상 = false;
        let mut 하 = false;
        let mut 좌 = false;
        let mut 우 = false;

        if 좌표.0 < 3 {
            좌 = true;
        }
        if 좌표.1 < 3 {
            상 = true;
        }
        if 좌표.0 > 행렬표.1-4 {
            우 = true;
        }
        if 좌표.1 > 행렬표.2-4 {
            하 = true;
        }

        let m_좌표 = 크리스마스를_찾아서(행렬.clone(), 좌표, 좌, 상, 우, 하, 'M');
        for m in m_좌표 {
            let a_좌표 = 다음글자_수색(행렬.clone(), (m.0, m.1), m.2, 'A');
            for a in a_좌표 {
                let s_좌표 = 다음글자_수색(행렬.clone(), (a.0, a.1), a.2, 'S');
                if s_좌표.len() != 0 {
                    // pintln!("이번 크리스마스는 {}시 방향으로 {}-{} / {}-{} / {}-{} / {}-{}", m.2, 좌표.0, 좌표.1, m.0, m.1, a.0, a.1, s_좌표[0].0, s_좌표[0].1);
                    크리스마스 += 1;
                }
            }
        }

    }
    println!("{}", 크리스마스);

}

fn 크리스마스를_찾아서(행렬:Vec<행렬>, 좌표:(usize, usize), 좌:bool, 상:bool, 우:bool, 하:bool, 찾을글자:char) -> Vec<(usize, usize, usize)> {
    let mut 다음_좌표 = Vec::new();

    // 12369874 순으로
    if 좌 && 상 && !우 && !하 { // 일단 1 == 896
        다음_좌표 = 다음글자_수색(행렬.clone(), 좌표, 8, 찾을글자);
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 9, 찾을글자));
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 6, 찾을글자));
    } else if  !좌 && 상 && !우 && !하 { // 2 == 47896
        다음_좌표 = 다음글자_수색(행렬.clone(), 좌표, 4, 찾을글자);
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 7, 찾을글자));
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 8, 찾을글자));
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 9, 찾을글자));
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 6, 찾을글자));
    } else if  !좌 && 상 && 우 && !하 { // 3 == 478
        다음_좌표 = 다음글자_수색(행렬.clone(), 좌표, 4, 찾을글자);
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 7, 찾을글자));
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 8, 찾을글자));
    } else if  !좌 && !상 && 우 && !하 { // 6 == 21478
        다음_좌표 = 다음글자_수색(행렬.clone(), 좌표, 2, 찾을글자);
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 1, 찾을글자));
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 4, 찾을글자));
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 7, 찾을글자));
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 8, 찾을글자));
    } else if  !좌 && !상 && 우 && 하 { // 9 == 412
        다음_좌표 = 다음글자_수색(행렬.clone(), 좌표, 4, 찾을글자);
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 1, 찾을글자));
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 2, 찾을글자));
    } else if  !좌 && !상 && !우 && 하 { // 8 == 41236
        다음_좌표 = 다음글자_수색(행렬.clone(), 좌표, 4, 찾을글자);
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 1, 찾을글자));
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 2, 찾을글자));
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 3, 찾을글자));
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 6, 찾을글자));
    } else if  좌 && !상 && !우 && 하 { // 7 == 236
        다음_좌표 = 다음글자_수색(행렬.clone(), 좌표, 2, 찾을글자);
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 3, 찾을글자));
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 6, 찾을글자));
    } else if  좌 && !상 && !우 && !하 { // 4 == 23698
        다음_좌표 = 다음글자_수색(행렬.clone(), 좌표, 2, 찾을글자);
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 3, 찾을글자));
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 6, 찾을글자));
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 9, 찾을글자));
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 8, 찾을글자));
    } else { // 중앙, 5 == 12369874
        다음_좌표 = 다음글자_수색(행렬.clone(), 좌표, 1, 찾을글자);
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 2, 찾을글자));
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 3, 찾을글자));
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 6, 찾을글자));
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 9, 찾을글자));
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 8, 찾을글자));
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 7, 찾을글자));
        다음_좌표.append(&mut 다음글자_수색(행렬.clone(), 좌표, 4, 찾을글자));
    }

    return 다음_좌표;
}

fn 다음글자_수색(행렬:Vec<행렬>, 좌표:(usize, usize), 방향:usize, 찾을글자:char) -> Vec<(usize, usize, usize)> {
    let mut 다음_좌표 = Vec::new();
    match 방향 {
        1 => {
            행렬.iter()
                .filter(|글자| 
                    글자.좌우 == 좌표.0 - 1 && 글자.상하 == 좌표.1 - 1
                )
                .filter(|글자| 글자.값 == 찾을글자)
                .for_each(|글자| 다음_좌표.push((글자.좌우, 글자.상하, 방향)));
        },
        2 => {
            행렬.iter()
                .filter(|글자| 
                    글자.좌우 == 좌표.0 && 글자.상하 == 좌표.1 - 1
                )
                .filter(|글자| 글자.값 == 찾을글자)
                .for_each(|글자| 다음_좌표.push((글자.좌우, 글자.상하, 방향)));
        },
        3 => {
            행렬.iter()
                .filter(|글자| 
                    글자.좌우 == 좌표.0 + 1 && 글자.상하 == 좌표.1 - 1
                )
                .filter(|글자| 글자.값 == 찾을글자)
                .for_each(|글자| 다음_좌표.push((글자.좌우, 글자.상하, 방향)));
        },
        6 => {
            행렬.iter()
                .filter(|글자| 
                    글자.좌우 == 좌표.0 + 1 && 글자.상하 == 좌표.1
                )
                .filter(|글자| 글자.값 == 찾을글자)
                .for_each(|글자| 다음_좌표.push((글자.좌우, 글자.상하, 방향)));
        },
        9 => {
            행렬.iter()
                .filter(|글자| 
                    글자.좌우 == 좌표.0 + 1 && 글자.상하 == 좌표.1 + 1
                )
                .filter(|글자| 글자.값 == 찾을글자)
                .for_each(|글자| 다음_좌표.push((글자.좌우, 글자.상하, 방향)));
        },
        8 => {
            행렬.iter()
                .filter(|글자| 
                    글자.좌우 == 좌표.0 && 글자.상하 == 좌표.1 + 1
                )
                .filter(|글자| 글자.값 == 찾을글자)
                .for_each(|글자| 다음_좌표.push((글자.좌우, 글자.상하, 방향)));
        },
        7 => {
            행렬.iter()
                .filter(|글자| 
                    글자.좌우 == 좌표.0 - 1 && 글자.상하 == 좌표.1 + 1
                )
                .filter(|글자| 글자.값 == 찾을글자)
                .for_each(|글자| 다음_좌표.push((글자.좌우, 글자.상하, 방향)));
        },
        4 => {
            행렬.iter()
                .filter(|글자| 
                    글자.좌우 == 좌표.0 - 1 && 글자.상하 == 좌표.1
                )
                .filter(|글자| 글자.값 == 찾을글자)
                .for_each(|글자| 다음_좌표.push((글자.좌우, 글자.상하, 방향)));
        },
        0.. => {
            let 빈튜플:(usize, usize, usize) = (0,0,0);
            return vec![빈튜플];
        }
    }

    return 다음_좌표;
}

pub fn 저런_x_mas였다네요(입력:&str) {
    let 행렬표 = 케레스식_암호행렬(입력);
    let 행렬 = 행렬표.0;
    let mut x마스:i32 = 0;
    let mut 시작좌표 = Vec::new();

    행렬.clone().iter()
        .filter(|한글자| 
            한글자.값 == 'A' && 한글자.좌우 != 0 && 한글자.상하 != 0 && 한글자.좌우 != 행렬표.1-1 && 한글자.상하 != 행렬표.2-1
        )
        .for_each(|한글자|
            시작좌표.push((한글자.좌우, 한글자.상하)),
        );

    for 좌표 in 시작좌표 {
        let mut 대각검토 = Vec::new();
        
        행렬.clone().iter()
            .filter(|대각선|
                (대각선.좌우 == 좌표.0-1 && 대각선.상하 == 좌표.1-1) || (대각선.좌우 == 좌표.0+1 && 대각선.상하 == 좌표.1+1)
            )
            .for_each(|대각선|
                대각검토.push(대각선.값),
            );
        if 대각검토.contains(&'M') && 대각검토.contains(&'S') {
            대각검토 = Vec::new();
            행렬.clone().iter()
                .filter(|대각선|
                    (대각선.좌우 == 좌표.0+1 && 대각선.상하 == 좌표.1-1) || (대각선.좌우 == 좌표.0-1 && 대각선.상하 == 좌표.1+1)
                )
                .for_each(|대각선|
                    대각검토.push(대각선.값),
                );
            if 대각검토.contains(&'M') && 대각검토.contains(&'S') {
                x마스 += 1;
            } 
        }
    }

    println!("{x마스}");
}